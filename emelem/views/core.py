import os
import json
from collections import defaultdict

from flask_appbuilder.security.sqla import models as ab_models
from flask_appbuilder.fieldwidgets import Select2Widget
from flask_appbuilder.models.sqla.interface import SQLAInterface
from flask_appbuilder import expose, has_access
from flask_appbuilder import BaseView
from flask_appbuilder import ModelView
from flask_appbuilder.actions import action
from flask_appbuilder.filemanager import uuid_originalname
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn
from flask import render_template
from flask_appbuilder import widgets
from flask_appbuilder import upload
#from wtforms.validators import EqualTo
from wtforms.ext.sqlalchemy.fields import QuerySelectField

from sqlalchemy.orm import load_only

from flask import (
    g, request, redirect, flash, Response, render_template, Markup, send_file, 
abort, url_for)

from flask_babel import gettext as __
from flask_babel import lazy_gettext as _

from .base import (
    api, json_error_response, get_error_msg
)

from emelem import app, appbuilder, db, utils
import emelem.models.core as models

MODEL_FILE_EXTENSION_ERR = __("File extension is not correct. It must be a pkl file '.pkl' generated by from scikit learn estimators with `joblib.dump` method.") 
MODEL_SAVING_ERR = __("Model file could not be saved correctly.") 

@appbuilder.app.errorhandler(404)
def page_not_found(e):
    """
    Application wide 404 error handler
    """
    return render_template('404.html',
                           base_template=appbuilder.base_template,
                           appbuilder=appbuilder), 404

db.create_all()

def mlmfile_query():
    return db.session.query(models.MLMFile)
    

def mlmfile_query_id(mlm_file_id):
    return db.session.query(models.MLMFile).filter(models.MLMFile.id==mlm_file_id)


class MLMModelView(ModelView):
    datamodel = SQLAInterface(models.MLM)
    

    label_columns = {'name': 'Model name',
                     'type': 'Model type',
                     'file_name': 'Model Filename',
                     #'download': 'Download'
    }

    list_columns = ['name', 'type', 'file_name', 'tags', 'projects', 'created_by', 'changed_by']
    add_columns = ['name', 'type', 'file']
    # add_form_extra_fields = {'mlm_filename':  QuerySelectField('MLMFile',
    #                           query_factory=mlmfile_query,
    #                           widget=Select2Widget())}
    #xsearch_columns = ['mlm_name', 'mlm_type']
    search_exclude_columns = ('created_by', 'changed_by', )

    edit_columns = ['name', 'type', 'file', 'tags', 'projects']
    # edit_columns = ['mlm_name', 'mlm_type', 'mlm_filename']
    # edit_form_extra_fields = {'mlm_filename':  QuerySelectField('MLMFile',
    #                           query_factory=mlmfile_query_id(models.MLM.mlm_file_id),
    #                           widget=Select2Widget(extra_classes="readonly"))}

    show_columns = ['name', 'type']
    
    # validators_columns = {'mlm_type': [EqualTo('my_field2',
    #                                    message=gettext('fields must match'))]}

    show_fieldsets = [
        ('Info', {'fields': ['name', 'type', 'file']}),
        ('Audit', {'fields': ['created_by', 'created_on', 'changed_by', 'changed_on'],
                   'expanded': False})
    ]
    #related_views = [MLMFileModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'
    edit_template = 'appbuilder/general/model/edit_cascade.html'

    description_columns = {
        'name': utils.markdown('MLM name is unique, e.g. mymodel-v0.1', True)
        }

    
    @action("muldelete", "Delete", "Delete all Really?", "fa-trash", single=False)
    def muldelete(self, items):
        self.datamodel.delete_all(items)
        self.update_redirect()
        return redirect(self.get_redirect())
    
    @expose("/import_mlm/", methods=['GET', 'POST'])
    @has_access
    def import_mlm(self):
        """Overrides the dashboards using pickled instances from the file."""
        f = request.files.get('file')
        if request.method == 'POST' and f:            
            if not f.filename.endswith('.pkl'):
                flash(MODEL_FILE_EXTENSION_ERR, "alert")
                return self.render_template('emelem/import_mlm.html')
                #return json_error_response(MODEL_FILE_EXTENSION_ERR, status=404)
            try:
                f.save(os.path.join(app.config['EMELEM_MODEL_FOLDER'], f.filename))
                mlm_file =  models.MLMFile(name=f.filename)
                db.session.add(mlm_file)
                db.session.commit()
                return redirect('/mlmmodelview/list/')
            except:
                db.session.rollback()
                flash(MODEL_SAVING_ERR, "alert")
                return self.render_template('emelem/import_mlm.html')
        return self.render_template('emelem/import_mlm.html')


class TagModelView(ModelView):
    datamodel = SQLAInterface(models.Tag)
    related_views = [MLMModelView]
    label_columns = {'name': 'Tag name'}
    list_columns = ['name']
    add_columns = ['name']
    edit_columns = ['name']
    show_columns = ['name']

    
class ProjectModelView(ModelView):
    datamodel = SQLAInterface(models.Project)
    related_views = [MLMModelView]
    label_columns = {'name': 'Project name',
                     'mlm.name': 'Model name'
    }
    list_columns = ['name']
    add_columns = ['name']
    edit_columns = ['name']
    show_columns = ['name']

    
# class MLMFileModelView(ModelView):
#     datamodel = SQLAInterface(models.MLMFile)
#     related_views = [MLMModelView]
#     label_columns = {'name': 'File Name', 'download': 'Download'}
#     add_columns = ['file', 'name', 'description']
#     #edit_columns = ['name', 'description']
#     list_columns = ['file_name', 'download']
#     #show_columns = ['name', 'download']
#     @expose('/upload/<path:filename>', methods=['GET', 'POST']) # this is a job for GET, not POST
#     def get_mlm_file(filename):
#         uploads = app.config['EMELEM_MODEL_FOLDER']
#         return send_from_directory(directory=uploads, filename=filename)

#appbuilder.add_view_no_menu(MLMFileModelView)
appbuilder.add_view(ProjectModelView, 'Project', category='ML', icon='fa-briefcase', category_icon='fa-line-chart')
appbuilder.add_view(TagModelView, 'Tag', category='ML', icon='fa-tags', category_icon='fa-line-chart')
#appbuilder.add_view(MLMFileModelView, 'MLM Files', category='ML', icon='fa-line-chart', category_icon='fa-cogs')
appbuilder.add_view(MLMModelView, 'ML Models', category='ML', icon='fa-area-chart', category_icon='fa-line-chart')
appbuilder.add_link("Import machine learning model",
                    href='/mlmmodelview/import_mlm/',
                    category='ML Models',
                    category_icon='fa-wrench',
                    icon='fa-cloud-upload',
)


class Emelem(BaseView):
    """ The base views for Emelem"""
    @api
    @has_access
    @expose("/csrf_token/", methods=['GET'])
    def csrf_token(self):
        return Response(
            self.render_template('emelem/csrf_token.json'),
            mimetype='text/json',
        )

    @api
    @has_access
    @expose("/models/<int:model_id>/", methods=['GET', 'POST'])
    def models(self, model_id):
        model_id = int(model_id)
        model  = (
            db.session
            .query(models.MLM)
            .filter_by(id=model_id)
            .one()
        )
        return Response(
            json.dumps({'name': str(model.mlm_name),
                        'type': str(model.mlm_type)}),
            mimetype="application/json")


    @expose("/welcome")
    def welcome(self):
        """Personalized welcome page"""
        if not g.user or not g.user.get_id():
            return redirect(appbuilder.get_url_for_login)
        return self.render_template('emelem/welcome.html', utils=utils)


    @expose('/download/<string:filename>')
    @has_access
    def download(self, filename):
        return send_file(os.path.join(self.appbuilder.app.config['UPLOAD_FOLDER'], filename),
                         attachment_filename=uuid_originalname(filename),
                         as_attachment=True)
    
    @has_access
    @expose("/profile/<username>/")
    def profile(self, username):
        """User profile page"""
        if not username and g.user:
            username = g.user.username
        user = (
            db.session.query(ab_models.User)
            .filter_by(username=username)
            .one()
        )
        roles = {}
        permissions = defaultdict(set)
        for role in user.roles:
            perms = set()
            for perm in role.permissions:
                perms.add(
                    (perm.permission.name, perm.view_menu.name)
                )
                if perm.permission.name in ('datasource_access', 'database_access'):
                    permissions[perm.permission.name].add(perm.view_menu.name)
            roles[role.name] = [
                [perm.permission.name, perm.view_menu.name]
                for perm in role.permissions
            ]
        payload = {
            'user': {
                'username': user.username,
                'firstName': user.first_name,
                'lastName': user.last_name,
                'userId': user.id,
                'isActive': user.is_active(),
                'createdOn': user.created_on.isoformat(),
                'email': user.email,
                'roles': roles,
                'permissions': permissions,
            }
        }
        return self.render_template(
            'emelem/profile.html',
            title=user.username + "'s profile",
            navbar_container=True,
            bootstrap_data=json.dumps(payload, default=utils.json_iso_dttm_ser)
        )
    

appbuilder.add_view_no_menu(Emelem)


